@using MyFoodApp.Application.DTOs
@using MyFoodApp.Application.Interfaces
@using MyFoodApp.Application.Common
@using MyFoodApp.Web.Components.Shared
@using MyFoodApp.Web.Components.Pages.Recipes.Management
@inject IRecipeUseCases RecipeUseCases

<div class="container">
    <h1 class="my-4 text-center">Recipes</h1>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <Search SearchDto="searchDto" />

    <SearchButton OnSearch="Search" OnReset="ResetSearch" OnAdd="ShowAddModal" />

    <MyFoodApp.Web.Components.Pages.Recipes.Table Recipes="Recipes" OnEdit="ShowEditModal" OnDisplay="ShowDisplayModal" />

    <SearchPagination TItem="RecipeDto" TotalItems="@totalItems" PageSize="@pageSize" CurrentPage="@currentPage" OnPageChanged="OnPageChanged" OnPageSizeChangedCallback="OnPageSizeChanged" />
}

<DisplayModal @ref="displayModal" />

<EditModal @ref="editModal" OnRecipeSaved="LoadRecipes" />

@code {
    private List<RecipeDto>? Recipes;
    private bool isLoading = true;
    private EditModal? editModal;
    private DisplayModal? displayModal;
    private RecipeSearchDto searchDto = new();
    private int totalItems;
    private int pageSize = 10;
    private int currentPage = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        isLoading = true;
        searchDto.PageNumber = currentPage;
        searchDto.PageSize = pageSize;

        var response = await RecipeUseCases.LookupRecipesAsync(searchDto);
        Recipes = response.List;
        totalItems = response.TotalItems;
        isLoading = false;
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        editModal!.Show(null);
    }

    private async void ShowEditModal(int id)
    {
        var response = await RecipeUseCases.GetRecipeByIdAsync(id);
        if (response.Item != null)
        {
            editModal!.Show(response.Item);
        }
    }

    private async void ShowDisplayModal(int id)
    {
        var response = await RecipeUseCases.GetRecipeByIdAsync(id);
        if (response.Item != null)
        {
            displayModal!.Show(response.Item);
        }
    }

    private async Task DeleteRecipe(RecipeDto dto)
    {
        await RecipeUseCases.DeleteRecipeAsync(dto.RecipeId);
        await LoadRecipes();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadRecipes();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 0;
        await LoadRecipes();
    }

    private async Task Search()
    {
        currentPage = 0;
        await LoadRecipes();
    }

    private async Task ResetSearch()
    {
        searchDto = new RecipeSearchDto();
        await LoadRecipes();
    }
}
