@using MyFoodApp.Application.DTOs
@using MyFoodApp.Application.Interfaces
@using MyFoodApp.Application.Common
@using MyFoodApp.Web.Components.Shared
@inject IRecipeUseCases RecipeUseCases

<div class="container">
    <h1 class="my-4 text-center">Recipes</h1>
</div>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <SearchFormRecipe SearchDto="searchDto" />

    <SearchButton OnSearch="Search" OnReset="ResetSearch" OnAdd="ShowAddModal" />

    <TableFormRecipe Recipes="Recipes" OnEdit="ShowEditModal" OnDelete="DeleteRecipe" />

    <SearchPagination TItem="RecipeDto" TotalItems="@totalItems" PageSize="@pageSize" CurrentPage="@currentPage" OnPageChanged="OnPageChanged" OnPageSizeChangedCallback="OnPageSizeChanged" />

    <DisplayError Errors="Errors" />
}

<EditModalRecipe @ref="editModal" OnRecipeSaved="LoadRecipes" />

@code {
    private List<RecipeDto>? Recipes;
    private List<Error> Errors { get; set; } = new();
    private bool isLoading = true;
    private EditModalRecipe? editModal;
    private RecipeSearchDto searchDto = new();
    private int totalItems;
    private int pageSize = 10;
    private int currentPage = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadRecipes();
        }
        catch (Exception ex)
        {
            Errors.Add(new Error { Code = "InitError", Message = ex.Message });
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRecipes()
    {
        try
        {
            isLoading = true;
            Errors.Clear();
            searchDto.PageNumber = currentPage;
            searchDto.PageSize = pageSize;

            var response = await RecipeUseCases.LookupRecipesAsync(searchDto);

            if (response.ErrorList.Any())
            {
                Errors.AddRange(response.ErrorList);
            }
            else
            {
                Recipes = response.List;
                totalItems = response.TotalItems;
            }
        }
        catch (Exception ex)
        {
            Errors.Add(new Error { Code = "LoadError", Message = ex.Message });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddModal()
    {
        try
        {
            Errors.Clear();
            editModal!.Show(null);
        }
        catch (Exception ex)
        {
            Errors.Add(new Error { Code = "AddModalError", Message = ex.Message });
            StateHasChanged();
        }
    }

    private async Task ShowEditModal(int id)
    {
        try
        {
            Errors.Clear();
            var response = await RecipeUseCases.GetRecipeByIdAsync(id);

            if (response.ErrorList.Any())
            {
                Errors.AddRange(response.ErrorList);
            }
            else if (response.Item != null)
            {
                editModal!.Show(response.Item);
            }
            else
            {
                Errors.Add(new Error { Code = "NotFound", Message = "Recipe not found" });
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Errors.Add(new Error { Code = "EditModalError", Message = ex.Message });
            StateHasChanged();
        }
    }

    private async Task DeleteRecipe(RecipeDto dto)
    {
        try
        {
            Errors.Clear();
            var response = await RecipeUseCases.DeleteRecipeAsync(dto.RecipeId);

            if (response.ErrorList.Any())
            {
                Errors.AddRange(response.ErrorList);
            }
            else
            {
                await LoadRecipes();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Errors.Add(new Error { Code = "DeleteError", Message = ex.Message });
            StateHasChanged();
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadRecipes();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 0;
        await LoadRecipes();
    }

    private async Task Search()
    {
        currentPage = 0;
        await LoadRecipes();
    }

    private async Task ResetSearch()
    {
        searchDto = new RecipeSearchDto();
        await LoadRecipes();
    }
}
