@using MyFoodApp.Application.DTOs
@using MyFoodApp.Domain.Enums

@if (Recipes?.Any() == false)
{
    <div class="text-center py-5">
        <i class="bi bi-journal-x fs-1 text-muted"></i>
        <p class="text-muted mt-2">No recipes found</p>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var recipe in Recipes!)
        {
            <div class="col">
                <div class="card h-100 shadow-sm hover-shadow transition-all">
                    <div class="card-body d-flex flex-column">
                        <div class="mb-3">
                            <h5 class="card-title fw-bold text-primary mb-3">@recipe.Title</h5>
                            <p class="card-text text-muted line-clamp-3">@recipe.Description</p>
                        </div>

                        <!-- Metadata Grid -->
                        <div class="row g-2 small mb-3">
                            <div class="col-6">
                                <div class="d-flex align-items-center text-muted">
                                    <i class="bi bi-list-ol me-2"></i>
                                    <span>@recipe.Steps.Count steps</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="d-flex align-items-center text-muted">
                                    <i class="bi bi-basket me-2"></i>
                                    <span>@recipe.Ingredients.Count ingredients</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="d-flex align-items-center text-muted">
                                    <i class="bi bi-fire me-2"></i>
                                    <span>@(CalculateCalories(recipe)) cal/serving</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="d-flex align-items-center text-muted">
                                    <i class="bi bi-clock me-2"></i>
                                    <span>@(recipe.PrepTimeMinutes + recipe.CookTimeMinutes)m total</span>
                                </div>
                            </div>
                        </div>

                        <!-- Ingredients Preview -->
                        <div class="mb-3">
                            <h6 class="text-secondary small">Main Ingredients:</h6>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var ingredient in recipe.Ingredients.Take(3))
                                {
                                    <span class="badge bg-light text-dark border">
                                        @ingredient.FoodItem?.Name
                                    </span>
                                }
                                @if (recipe.Ingredients.Count > 3)
                                {
                                    <span class="badge bg-light text-dark border">
                                        +@(recipe.Ingredients.Count - 3) more
                                    </span>
                                }
                            </div>
                        </div>

                        <!-- Meal Suggestions -->
                        @if (recipe.MealSuggestions.Any())
                        {
                            <div class="mt-auto">
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var suggestion in recipe.MealSuggestions)
                                    {
                                        <span class="badge bg-primary bg-opacity-10 text-primary">
                                            @suggestion.MealSuggestion?.MealType
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Footer with Actions -->
                    <div class="card-footer bg-transparent border-top-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted small">
                                @recipe.Servings <i class="bi bi-people ms-1"></i>
                            </span>
                            <button class="btn btn-outline-primary btn-sm"
                                    @onclick="() => OnEdit.InvokeAsync(recipe.RecipeId)">
                                <i class="bi bi-pencil me-2"></i>Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public List<RecipeDto>? Recipes { get; set; }

    [Parameter]
    public EventCallback<int> OnEdit { get; set; }

    private string CalculateCalories(RecipeDto recipe)
    {
        try
        {
            var totalCalories = recipe.Ingredients
                .Sum(i => ConvertToCalories(i));

            var perServing = totalCalories / recipe.Servings;
            return perServing > 0 ? perServing.ToString("N0") : "N/A";
        }
        catch
        {
            return "N/A";
        }
    }

    private decimal ConvertToCalories(IngredientDto ingredient)
    {
        decimal caloriesPerUnit = ingredient.FoodItem?.CaloriesPerUnit ?? 0;
        decimal quantityInGrams;

        switch (ingredient.Unit)
        {
            case UnitType.Gram:
                quantityInGrams = ingredient.Quantity;
                break;
            case UnitType.Kilogram:
                quantityInGrams = ingredient.Quantity * 1000;
                break;
            case UnitType.Milliliter:
                // Assuming density of water, 1 milliliter = 1 gram
                quantityInGrams = ingredient.Quantity;
                break;
            case UnitType.Liter:
                // Assuming density of water, 1 liter = 1000 grams
                quantityInGrams = ingredient.Quantity * 1000;
                break;
            case UnitType.Teaspoon:
                // Assuming 1 teaspoon = 5 grams (adjust based on substance)
                quantityInGrams = ingredient.Quantity * 5;
                break;
            case UnitType.Tablespoon:
                // Assuming 1 tablespoon = 15 grams (adjust based on substance)
                quantityInGrams = ingredient.Quantity * 15;
                break;
            case UnitType.Cup:
                // Assuming 1 cup = 240 grams (adjust based on substance)
                quantityInGrams = ingredient.Quantity * 240;
                break;
            case UnitType.Piece:
                // Assuming average weight per piece for certain food items
                quantityInGrams = ingredient.Quantity * GetAverageWeightPerPiece(ingredient.FoodItem.Name);
                break;
            default:
                quantityInGrams = ingredient.Quantity;
                break;
        }

        // Calories per gram
        return quantityInGrams * (caloriesPerUnit / 100);
    }

    private decimal GetAverageWeightPerPiece(string foodItemName)
    {
        // Define average weights for specific food items
        return foodItemName switch
        {
            "Bell Pepper" => 120,
            "Carrot" => 75,
            "Banana" => 120,
            "Onion" => 110,
            "Garlic" => 5,
            _ => 100 // Default weight
        };
    }
}
